package main

import (
	"fmt"
	"io/ioutil"
	"os"
	"strings"
)

type point struct {
	x, y, z, s int
	// key is the key of the chain that this point is a part off
	next, prev *point
}

func (p point) dist(other point) int {
	return abs(p.x-other.x) + abs(p.y-other.y) + abs(p.z-other.z) + abs(p.s-other.s)
}

func (p point) equals(other point) bool {
	return p.x == other.x && p.y == other.y && p.z == other.z && p.s == other.s
}

func main() {
	filename := os.Args[1]
	content, _ := ioutil.ReadFile(filename)
	run(content)
}

func run(content []byte) {
	//chains := make(map[int][]*point)
	//chains := make([]*[]point, 0)
	lines := strings.Split(string(content), "\n")
	points := make([]*point, 0)
	for i, l := range lines {
		var (
			x, y, z, s int
		)
		_, _ = fmt.Sscanf(l, "%d,%d,%d,%d", &x, &y, &z, &s)
		p := point{x: x, y: y, z: z, s: s, next: nil, prev: nil}
		points = append(points, &p)
	}
	for _, p1 := range points {
		for _, p2 := range points {
			if p1.equals(*p2) {
				continue
			}

			if p2.dist(*p1) > 3 {
				continue
			}
			// prev - curr - next
			// o -- y -- o
			// joins
			// o -- x -- o -- o
			// look up the last element and add next to the first element of the previous graph
			if p1.next == nil {

			}
		}
	}
}

func abs(a int) int {
	if a < 0 {
		return -a
	}
	return a
}
